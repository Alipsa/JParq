package se.alipsa.jparq;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

/** An implementation of the java.sql.PreparedStatement interface. */
@SuppressWarnings({
    "checkstyle:AbbreviationAsWordInName", "checkstyle:OverloadMethodsDeclarationOrder"
})
class JParqPreparedStatement implements PreparedStatement {
  private final JParqStatement stmt;
  private final String sql;

  JParqPreparedStatement(JParqStatement stmt, String sql) {
    this.stmt = stmt;
    this.sql = sql;
  }

  @Override
  public ResultSet executeQuery() throws SQLException {
    return stmt.executeQuery(sql);
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    return stmt.executeQuery(sql);
  }

  @Override
  public int executeUpdate() throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public boolean execute() throws SQLException {
    stmt.executeQuery(sql);
    return true;
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    stmt.executeQuery(sql);
    return true;
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    stmt.executeQuery(sql);
    return true;
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    stmt.executeQuery(sql);
    return true;
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    stmt.executeQuery(sql);
    return true;
  }

  @Override
  public void close() {
    // Do nothing
  }

  @Override
  public Connection getConnection() throws SQLException {
    return stmt.getConnection();
  }

  // Parameter setters are no-ops since we don't bind values
  @Override
  public void setString(int parameterIndex, String x) {
    // Do nothing
  }

  @Override
  public void setInt(int parameterIndex, int x) {
    // Do nothing
  }

  @Override
  public void setObject(int parameterIndex, Object x) {
    // Do nothing
  }

  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType) {
    // Do nothing
  }

  @Override
  public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) {
    // Do nothing
  }

  @Override
  public void clearParameters() {
    // Do nothing
  }

  // Many other methods omitted or trivial since it's read-only
  @Override
  public ResultSet getResultSet() {
    return stmt.getResultSet();
  }

  @Override
  public boolean isClosed() {
    return false;
  }

  @Override
  public boolean isPoolable() {
    return false;
  }

  @Override
  public void setPoolable(boolean poolable) {
    // Do nothing
  }

  @Override
  public void closeOnCompletion() {
    // Do nothing
  }

  @Override
  public boolean isCloseOnCompletion() {
    return false;
  }

  // Unused PreparedStatement-specific methods (batch, meta, etc.)
  @Override
  public ResultSetMetaData getMetaData() {
    return null;
  }

  @Override
  public ParameterMetaData getParameterMetaData() {
    return null;
  }

  @Override
  public void setNull(int parameterIndex, int sqlType) {
    // Do nothing
  }

  @Override
  public void setNull(int parameterIndex, int sqlType, String typeName) {
    // Do nothing
  }

  @Override
  public void setBoolean(int parameterIndex, boolean x) {
    // Do nothing
  }

  @Override
  public void setByte(int parameterIndex, byte x) {
    // Do nothing
  }

  @Override
  public void setShort(int parameterIndex, short x) {
    // Do nothing
  }

  @Override
  public void setLong(int parameterIndex, long x) {
    // Do nothing
  }

  @Override
  public void setFloat(int parameterIndex, float x) {
    // Do nothing
  }

  @Override
  public void setDouble(int parameterIndex, double x) {
    // Do nothing
  }

  @Override
  public void setBigDecimal(int parameterIndex, BigDecimal x) {
    // Do nothing
  }

  @Override
  public void setBytes(int parameterIndex, byte[] x) {
    // Do nothing
  }

  @Override
  public void setDate(int parameterIndex, Date x) {
    // Do nothing
  }

  @Override
  public void setDate(int parameterIndex, Date x, Calendar cal) {
    // Do nothing
  }

  @Override
  public void setTime(int parameterIndex, Time x) {
    // Do nothing
  }

  @Override
  public void setTime(int parameterIndex, Time x, Calendar cal) {
    // Do nothing
  }

  @Override
  public void setTimestamp(int parameterIndex, Timestamp x) {
    // Do nothing
  }

  @Override
  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) {
    // Do nothing
  }

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, int length) {
    // Do nothing
  }

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x, long length) {
    // Do nothing
  }

  @Override
  public void setAsciiStream(int parameterIndex, InputStream x) {
    // Do nothing
  }

  @SuppressWarnings("deprecation")
  @Override
  public void setUnicodeStream(int parameterIndex, InputStream x, int length) {
    // Do nothing
  }

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, int length) {
    // Do nothing
  }

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x, long length) {
    // Do nothing
  }

  @Override
  public void setBinaryStream(int parameterIndex, InputStream x) {
    // Do nothing
  }

  @Override
  public void addBatch() {
    // Do nothing
  }

  @Override
  public void addBatch(String sql) {
    // Do nothing
  }

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, int length) {
    // Do nothing
  }

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader, long length) {
    // Do nothing
  }

  @Override
  public void setCharacterStream(int parameterIndex, Reader reader) {
    // Do nothing
  }

  @Override
  public void setRef(int parameterIndex, Ref x) {
    // Do nothing
  }

  @Override
  public void setBlob(int parameterIndex, Blob x) {
    // Do nothing
  }

  @Override
  public void setBlob(int parameterIndex, InputStream inputStream, long length) {
    // Do nothing
  }

  @Override
  public void setBlob(int parameterIndex, InputStream inputStream) {
    // Do nothing
  }

  @Override
  public void setClob(int parameterIndex, Clob x) {
    // Do nothing
  }

  @Override
  public void setClob(int parameterIndex, Reader reader, long length) {
    // Do nothing
  }

  @Override
  public void setClob(int parameterIndex, Reader reader) {
    // Do nothing
  }

  @Override
  public void setArray(int parameterIndex, Array x) {
    // Do nothing
  }

  @Override
  public void setURL(int parameterIndex, URL x) {
    // Do nothing
  }

  @Override
  public void setRowId(int parameterIndex, RowId x) {
    // Do nothing
  }

  @Override
  public void setNString(int parameterIndex, String value) {
    // Do nothing
  }

  @Override
  public void setNCharacterStream(int parameterIndex, Reader value, long length) {
    // Do nothing
  }

  @Override
  public void setNCharacterStream(int parameterIndex, Reader value) {
    // Do nothing
  }

  @Override
  public void setNClob(int parameterIndex, NClob value) {
    // Do nothing
  }

  @Override
  public void setNClob(int parameterIndex, Reader reader, long length) {
    // Do nothing
  }

  @Override
  public void setNClob(int parameterIndex, Reader reader) {
    // Do nothing
  }

  @Override
  public void setSQLXML(int parameterIndex, SQLXML xmlObject) {
    // Do nothing
  }

  @Override
  public int getMaxFieldSize() {
    return 0;
  }

  @Override
  public void setMaxFieldSize(int max) {
    // Do nothing
  }

  @Override
  public int getMaxRows() {
    return 0;
  }

  @Override
  public void setMaxRows(int max) {
    // Do nothing
  }

  @Override
  public void setEscapeProcessing(boolean enable) {
    // Do nothing
  }

  @Override
  public int getQueryTimeout() {
    return 0;
  }

  @Override
  public void setQueryTimeout(int seconds) {
    // Do nothing
  }

  @Override
  public void cancel() {
    // Do nothing
  }

  @Override
  public SQLWarning getWarnings() {
    return null;
  }

  @Override
  public void clearWarnings() {
    // Do nothing
  }

  @Override
  public void setCursorName(String name) {
    // Do nothing
  }

  @Override
  public int getUpdateCount() {
    return 0;
  }

  @Override
  public boolean getMoreResults() {
    return false;
  }

  @Override
  public boolean getMoreResults(int current) {
    return false;
  }

  @Override
  public void setFetchDirection(int direction) {
    // Do nothing
  }

  @Override
  public int getFetchDirection() {
    return ResultSet.FETCH_FORWARD;
  }

  @Override
  public void setFetchSize(int rows) {
    // Do nothing
  }

  @Override
  public int getFetchSize() {
    return 0;
  }

  @Override
  public int getResultSetConcurrency() {
    return ResultSet.CONCUR_READ_ONLY;
  }

  @Override
  public int getResultSetType() {
    return ResultSet.TYPE_FORWARD_ONLY;
  }

  @Override
  public void clearBatch() {
    // Do nothing
  }

  @Override
  public int[] executeBatch() {
    return new int[0];
  }

  @Override
  public ResultSet getGeneratedKeys() {
    return null;
  }

  @Override
  public int getResultSetHoldability() {
    return 0;
  }

  @Override
  public <T> T unwrap(Class<T> iface) {
    return null;
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) {
    return false;
  }
}
