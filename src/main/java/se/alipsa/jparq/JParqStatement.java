package se.alipsa.jparq;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;
import org.apache.commons.lang3.concurrent.BasicThreadFactory;

/** An implementation of the java.sql.Statement interface. */
@SuppressWarnings({
    "checkstyle:AbbreviationAsWordInName", "checkstyle:OverloadMethodsDeclarationOrder"
})
public class JParqStatement extends BasicThreadFactory.Builder implements Statement {

  private final JParqConnection conn;
  private String currentSql;
  private JParqResultSet currentRs;

  /**
   * Constructor for JParqStatement.
   *
   * @param conn
   *          the JParqConnection
   */
  public JParqStatement(JParqConnection conn) {
    this.conn = conn;
  }

  // Used by JParqConnection
  PreparedStatement prepare(String sql) throws SQLException {
    this.currentSql = sql;
    return new JParqPreparedStatement(this, sql);
  }

  public JParqConnection getConn() {
    return conn;
  }

  public String getCurrentSql() {
    return currentSql;
  }

  public JParqResultSet getCurrentRs() {
    return currentRs;
  }

  // New setter required by JParqPreparedStatement to link its ResultSet
  public void setCurrentRs(JParqResultSet rs) {
    this.currentRs = rs;
  }

  /**
   * Executes the query by delegating the work to a temporary PreparedStatement.
   * This ensures the query planning logic is centralized in the prepared
   * statement class.
   */
  @SuppressWarnings({
      "PMD.CloseResource", "PMD.AvoidCatchingGenericException", "PMD.EmptyCatchBlock"
  })
  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    this.currentSql = sql;
    // Delegation: Create a temporary prepared statement, execute it, and close it.
    // The JParqPreparedStatement constructor will perform the expensive planning
    // phase.
    try (JParqPreparedStatement pstmt = new JParqPreparedStatement(this, sql)) {
      this.currentRs = (JParqResultSet) pstmt.executeQuery();
      return currentRs;
    }
  }

  // --- Boilerplate / no-ops for read-only driver ---
  @Override
  public int executeUpdate(String sql) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public void close() {
    try {
      if (currentRs != null) {
        currentRs.close();
      }
    } catch (SQLException ignored) {
      // Ignore
    }
  }

  @Override
  public int getMaxFieldSize() {
    return 0;
  }

  @Override
  public void setMaxFieldSize(int max) {
  }

  @Override
  public int getMaxRows() {
    return 0;
  }

  @Override
  public void setMaxRows(int max) {
  }

  @Override
  public void setEscapeProcessing(boolean enable) {
  }

  @Override
  public int getQueryTimeout() {
    return 0;
  }

  @Override
  public void setQueryTimeout(int seconds) {
  }

  @Override
  public void cancel() {
  }

  @Override
  public SQLWarning getWarnings() {
    return null;
  }

  @Override
  public void clearWarnings() {
  }

  @Override
  public void setCursorName(String name) {
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    executeQuery(sql);
    return true;
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    throw new SQLFeatureNotSupportedException();
  }

  @Override
  public ResultSet getResultSet() {
    return currentRs;
  }

  @Override
  public int getUpdateCount() {
    return -1;
  }

  @Override
  public boolean getMoreResults() {
    return false;
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return false;
  }

  @Override
  public void setFetchDirection(int direction) {
    // Ignore
  }

  @Override
  public int getFetchDirection() {
    return ResultSet.FETCH_FORWARD;
  }

  @Override
  public void setFetchSize(int rows) {
  }

  @Override
  public int getFetchSize() {
    return 0;
  }

  @Override
  public int getResultSetConcurrency() {
    return ResultSet.CONCUR_READ_ONLY;
  }

  @Override
  public int getResultSetType() {
    return ResultSet.TYPE_FORWARD_ONLY;
  }

  @Override
  public void addBatch(String sql) {
  }

  @Override
  public void clearBatch() throws SQLException {
  }

  @Override
  public int[] executeBatch() throws SQLException {
    return new int[0];
  }

  @Override
  public Connection getConnection() throws SQLException {
    return conn;
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return null;
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return 0;
  }

  @Override
  public boolean isClosed() throws SQLException {
    return false;
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return false;
  }

  @Override
  public void closeOnCompletion() throws SQLException {
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return false;
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    return null;
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return false;
  }
}
